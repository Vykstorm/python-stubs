
from typing import *


class Section(Dict[str, Any]):
    def dict(self: Any) -> Dict[str, Any]: ...
    def rename(self: Any, oldKey: str, newKey: str) -> None: ...
    def merge(self : Any, indict: Section, decoupled : bool = False) -> None: ...
    def walk(self : Any, function : Callable[['Section', str], None],
        raise_errors : bool = True, call_on_sections : bool = True, **kwargs) -> Dict[str, Any]: ...

    def restore_default(self : Any, key : str) -> Any: ...
    def restore_defaults(self : Any) -> None: ...

    def as_bool(self: Any, key: str) -> bool: ...
    def as_int(self: Any, key: str) -> int: ...
    def as_float(self: Any, key: str) -> float: ...
    def as_list(self: Any, key: str) -> List[Any]: ...


infile_type = Union[str, Union[List[str], Tuple[str]], IO[str], Dict[str, Any]]
outfile_type = Union[str, IO[str]]

class ConfigObj(Section):
    def __init__(
        self: Any,
        infile: Optional[infile_type] = None,
        raise_errors: bool = False, list_values: bool = True, create_empty: bool = False,
        file_error: bool = False, interpolation: bool = True, stringify: bool = True,
        configspec: Optional[infile_type] = None,
        indent_type: Optional[str] = None,
        encoding: Optional[str] = None, default_encoding: Optional[str] = None,
        unrepr: bool = False, write_empty_values: bool = False, _inspec: bool = False
        ): ...


    def reset(self : Any) -> None: ...
    def reload(self : Any) -> None: ...
    def write(self : Any, outfile : Optional[outfile_type] = None, section : Optional[str] = None) -> Any: ...

    def validate(
        self : Any,
        validator : Any,
        preserve_errors : bool = False, copy : bool = False) -> Any: ...
